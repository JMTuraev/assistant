generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:102030@localhost:3306/main"
}

model User {

  id                 Int      @id @unique @default(autoincrement())
  id_u               String   @unique
  login              String
  password           String 
  userLevelRelation  Role     @relation(fields: [userLevel], references: [id_u], onDelete: Cascade, onUpdate: Cascade)
  userLevel          String 
  firstName          String? 
  surName            String?
  fatherName         String?
  email              String?  @unique
  phone              String?  @unique
  location           String?
  img                String?
  salary             Int      @default(0)
  currencyRelation   Currency @relation(fields: [currency], references: [id_u], onDelete: Cascade, onUpdate: Cascade)
  currency           String   
  createDate         DateTime @default(now())
  company            Company[]
  marketRelation     MarketRelation[]
  companyRelation    CompanyRelation[]
  parrentRelation    UserRelation[] @relation("parrentRelation")
  childRelation      UserRelation[] @relation("childRelation")

}

model UserRelation {

  id                 Int      @id @unique @default(autoincrement())
  id_u               String   @unique
  parrentRelation    User     @relation("parrentRelation", fields: [parrent], references: [id_u], onDelete: Cascade, onUpdate: Cascade)
  parrent            String
  childRelation      User     @relation("childRelation",     fields: [child], references: [id_u], onDelete: Cascade, onUpdate: Cascade)
  child              String

}

model Company {

  id                 Int      @id @unique @default(autoincrement())
  id_u               String   @unique
  name               String
  category           String // Вид деятельности
  location           String
  lawAddress         String   @unique // Юридечкиский адресс
  inn                String
  bankAccount        String // рассчетный счет
  mfo                String   @unique
  img                String?
  ownerRelation      User     @relation(fields: [owner], references: [id_u], onDelete: Cascade, onUpdate: Cascade)
  owner              String
  companyRelation    CompanyRelation[]
  market             Market[]

}

model CompanyRelation {

  id                 Int      @id @unique @default(autoincrement())
  id_u               String   @unique
  userRelation       User     @relation(fields: [user], references: [id_u], onDelete: Cascade, onUpdate: Cascade)
  user               String
  companyRelation    Company  @relation(fields: [company], references: [id_u], onDelete: Cascade, onUpdate: Cascade)
  company            String

}

model Market {

  id                 Int     @id @unique @default(autoincrement())
  id_u               String  @unique
  name               String
  location           String
  lawAddress         String  @unique
  img                String?
  companyRelation    Company @relation(fields: [company], references: [id_u], onDelete: Cascade, onUpdate: Cascade)
  company            String
  marketRelation     MarketRelation[]
  warehouseRelation  WarehouseRelation[]


}


model MarketRelation {

  id                 Int      @id @unique @default(autoincrement())
  id_u               String   @unique
  userRelation       User     @relation(fields: [user], references: [id_u], onDelete: Cascade, onUpdate: Cascade)
  user               String
  marketRelation     Market  @relation(fields: [market], references: [id_u], onDelete: Cascade, onUpdate: Cascade)
  market             String

}

model Warehouse {

  id                                 Int    @id @unique @default(autoincrement())
  id_u                               String   @unique
  warehouseDepartamentRelation       WarehouseDepartament     @relation(fields: [warehouseDepartament], references: [id_u], onDelete: Cascade, onUpdate: Cascade)
  warehouseDepartament               String
  quantity                           Int
  editPrice                          Int
  comingWaherhouse                   ComingWarehouse[]
  product                            Product[]
  saleProduct                        SaleProduct[]

}

model WarehouseDepartament {

  id                 Int    @id @unique @default(autoincrement())
  id_u               String   @unique
  name               String
  location           String
  warehouse          Warehouse[]
  warehouseRelation  WarehouseRelation[]

}

model WarehouseRelation {

  id                 Int    @id @unique @default(autoincrement())
  id_u               String @unique
  // waherhouseRelation Warehouse @relation(fields: [waherhouse], references: [id_u], onDelete: Cascade, onUpdate: Cascade)
  // waherhouse         String
  warehouseDepartamentRelation WarehouseDepartament @relation(fields: [warehouseDepartament], references: [id_u], onDelete: Cascade, onUpdate: Cascade)
  warehouseDepartament         String
  marketRelation               Market @relation(fields: [market], references: [id_u], onDelete: Cascade, onUpdate: Cascade)
  market                       String

}

model ComingWarehouse{

  id                 Int       @id @unique @default(autoincrement())
  id_u               String    @unique
  waherhouseRelation Warehouse @relation(fields: [waherhouse], references: [id_u], onDelete: Cascade, onUpdate: Cascade)
  waherhouse         String
  quantity           Int
  price              Int
  currencyRelation   Currency  @relation(fields: [currency], references: [id_u], onDelete: Cascade, onUpdate: Cascade)
  currency           String    @default("NULL")
  supplier           String
  unit               String // Ед. измерения
  date               DateTime
  
}

model Currency { // Валюта

  id                 Int    @id @unique @default(autoincrement())
  id_u               String   @unique
  name               String
  user               User[]
  comingWarehouse    ComingWarehouse[]

}

model Sale { // поставщик

  id                 Int    @id @unique @default(autoincrement())
  id_u               String @unique
  retail             String
  check              Int    @unique
  tariffRelation     Tariff @relation(fields: [tariff], references: [id_u], onDelete: Cascade, onUpdate: Cascade)
  tariff             String
  sum                Int
  cash               Int
  credit             Int
  clientRelation     Client @relation(fields: [client], references: [id_u], onDelete: Cascade, onUpdate: Cascade)
  client             String
  description        String
  discount           String?
  date               DateTime @default(now())
  saleProduct        SaleProduct[]

}

model SaleProduct {

  id                 Int       @id @unique @default(autoincrement())
  id_u               String    @unique
  saleRelation       Sale      @relation(fields: [sale], references: [check], onDelete: Cascade, onUpdate: Cascade)
  sale               Int
  waherhouseRelation Warehouse @relation(fields: [waherhouse], references: [id_u], onDelete: Cascade, onUpdate: Cascade)
  waherhouse         String
  qty                Int
  price              Int
  priceProduct       Int
  credit             Credit[]

}

model Credit {

  id                        Int              @id @unique @default(autoincrement())
  id_u                      String           @unique
  saleProductRelation       SaleProduct      @relation(fields: [saleProduct], references: [id_u], onDelete: Cascade, onUpdate: Cascade)
  saleProduct               String
  startDate                 DateTime         @default(now())
  endDate                   DateTime
  sum                       Int

}

model Tariff { // поставщик

  id                 Int    @id @unique @default(autoincrement())
  id_u               String   @unique
  name               String
  period             Int
  percent            Int
  date               DateTime @default(now())
  sale               Sale[]

}

model Supplier { // поставщик

  id                 Int    @id @unique @default(autoincrement())
  id_u               String   @unique
  name               String
  agentName          String?
  agentPhone         String?

}

model Product {

  id                 Int    @id @unique @default(autoincrement())
  id_u               String   @unique
  name               String
  model              String
  category           String
  waherhouseRelation Warehouse @relation(fields: [waherhouse], references: [id_u], onDelete: Cascade, onUpdate: Cascade)
  waherhouse         String

}

model Role {

  id                 Int    @id @unique @default(autoincrement())
  id_u               String   @unique
  name               String
  level              Int
  user               User[]

}

model Client {

  id                 Int    @id @unique @default(autoincrement())
  id_u               String   @unique
  firstName          String 
  surName            String 
  fatherName         String
  passportSeries     String
  registeredByWhom   String // кем выдан пасспорт
  dateOfPassport     String // дата выдачи пасспорта
  placeOfWork        String // место работы
  phoneOfWork        String @unique
  phone              String @unique
  comment            String
  email              String @unique
  location           String
  sale               Sale[]
}

model Money { // Истончик от магазина

  id                 Int    @id @unique @default(autoincrement())
  id_u               String   @unique
  amount             Int 
  typeAmount         Int
  date               DateTime // начало
  period             DateTime? // конец
  percent            Int?
  credit             String?
  client             String

}